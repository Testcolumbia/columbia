/*
 * This method is used to Create Windows Media Encoder in the Application.
 * @param sel selenium object that runs the selenium commands
 * @param str_WMEName is used to provide Windows media encoder name.
 * @param str_WMEhost is used to provide the host for WME
 * @param str_WMEcommPort is used to provide the Communication Port.
 * @param str_WMEdocRoot is used to provide the Document Root for encoder files.
 * @param str_WMEProName is used to provide Windows Media Encoder Profile name.
 * @param str_WMEPort is used to Port for WME output.
 * @param str_WMEsavedFilepath is used to provide the path for the .wme file.
 * @throws Exception 
*/

package com.qa.columbia.functions;

import java.util.Calendar;
import java.util.Date;

import com.qa.columbia.repository.*;
import com.thoughtworks.selenium.*;
import com.qa.columbia.executor.*;

public class Create_WME extends TesterAsserter {
	
    public static void create_WME(Selenium sel,String str_WMEName, String str_WMEhost, String str_WMEcommPort, String str_WMEdocRoot,String str_WMEProName, String str_WMEPort,String str_WMEsavedFilepath) throws Exception {
		
    	Utility_Functions utilityFunction = new Utility_Functions();
		
    	//Fetching values for Global Variables from XMl file
		String str_path ="Global_variables.xml";
		Date date=Calendar.getInstance().getTime();
		String VAR_MED_WAIT = utilityFunction.GetValue(str_path ,"VAR_MED_WAIT");
		String VAR_MAX_WAIT = utilityFunction.GetValue(str_path ,"VAR_MED_WAIT");
		String Var_WMEProf_VideoSize = utilityFunction.GetValue(str_path ,"Var_WMEProf_VideoSize");
		String Var_WMEProf_BitRate = utilityFunction.GetValue(str_path ,"Var_WMEProf_BitRate");
		//String Var_WME_Host = utilityFunction.GetValue(str_path ,"Var_WME_Host");
	    
		//Fetching values for local Variables from XMl file
		String local_path ="local_Variables.xml";
		String Var_Select_WME = utilityFunction.GetValue(local_path ,"Var_Select_WME");
		
		
		//Click on Resources Menu
		sel.click(EnvObjectMap_Rep.LNK_Resources);		
		//Click on Encoder menu		
		sel.click(EnvObjectMap_Rep.LNK_Encoders);		
		//Wait for loading the page
		sel.waitForPageToLoad(VAR_MAX_WAIT);
		//Click on Add button
		sel.click(EnvObjectMap_Rep.Btn_Add_Encoder);
		//Select the Windows Media Encoder from the panel
		sel.addSelection(EnvObjectMap_Rep.SelectType_Enc, Var_Select_WME);
		//Click on Windows Media Encoder
		sel.click(EnvObjectMap_Rep.LNK_WME);
		//Wait for loading the page
		sel.waitForPageToLoad(VAR_MED_WAIT);
		//Provide the WME name
		sel.type(EnvObjectMap_Rep.TXT_WME_Name, str_WMEName);
		//Provide the Host name
		sel.type(EnvObjectMap_Rep.TXT_WME_Host, str_WMEhost);
		//Provide the Communication Port
		sel.type(EnvObjectMap_Rep.TXT_WME_CommPort, str_WMEcommPort);
		//Provide the document root 
		sel.type(EnvObjectMap_Rep.TXT_WME_DocRoot, str_WMEdocRoot);
		//Click on Add button to add the encoder profile
		sel.click(EnvObjectMap_Rep.Btn_AddWMEProfile);
		//Wait for loading the page
		sel.waitForPageToLoad(VAR_MAX_WAIT);
		//Provide the encoder profile name
		sel.type(EnvObjectMap_Rep.TXT_WMEProf_Name, str_WMEProName);
		//Choose the appropriate Video Size 
		sel.select(EnvObjectMap_Rep.Drp_WMEProf_VideoSize, Var_WMEProf_VideoSize);
		//Provide the Video bitrate
		sel.type(EnvObjectMap_Rep.TXT_WMEProf_Bitrate,Var_WMEProf_BitRate);
		//External URL of the encoder
		String URL = "http://" + str_WMEhost + ":" + str_WMEPort;
		//Provide the Encoder URL
		sel.type(EnvObjectMap_Rep.TXT_WMEProf_ExtURL, URL);
		//Provide the Encoder Port 
		sel.type(EnvObjectMap_Rep.TXT_WMEProf_Port, str_WMEPort);
		//Choose the checkbox to select the WME profile settings from the saved .wme file
		sel.click(EnvObjectMap_Rep.Radio_WMEProf_wmeFile);
		//Provide the path of the saved .wme file 
		sel.type(EnvObjectMap_Rep.TXT_WMEProf_Path, str_WMEsavedFilepath);
		//Save the Encoder Profile
		sel.click(EnvObjectMap_Rep.Btn_Save_WMEProf);
		//Wait for loading the page
		sel.waitForPageToLoad(VAR_MAX_WAIT);
		//Save the WME
		sel.click(EnvObjectMap_Rep.Btn_Save_WME);
		//wait for loading the page
		sel.waitForPageToLoad(VAR_MAX_WAIT);
		//verifies the checkpoint for successful WME Creation
		assertTrue("Columbia_LiveProgramVerification","Verify that WME with profile is created successfully.",date,sel.isTextPresent(str_WMEName));	
	}
}
